Network Working Group                                          J. Bognar
Request for Comments: 9999                                     C. Chaney  
Category: Informational                                              IBM
                                                                Jan 2014

                            ***DRAFT***
               URI Object Notation (UON): Generic Syntax


About this document

   This memo provides information for the Internet community.  It does
   not specify an Internet standard of any kind.  Distribution of this
   memo is unlimited.

Copyright Notice

  Licensed to the Apache Software Foundation (ASF) under one
  or more contributor license agreements.  See the NOTICE file
  distributed with this work for additional information
  regarding copyright ownership.  The ASF licenses this file
  to you under the Apache License, Version 2.0 (the
  "License"); you may not use this file except in compliance
  with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing,
  software distributed under the License is distributed on an
  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
  KIND, either express or implied.  See the License for the
  specific language governing permissions and limitations
  under the License.

Abstract

   This document describes a grammar that builds upon RFC2396
   (Uniform Resource Identifiers).  Its purpose is to define a 
   generalized object notation for URI query parameter values similar in 
   concept to Javascript Object Notation (RFC4627).  The goal is a 
   syntax such that any data structure defined in JSON can be losslessly 
   defined in an equivalent URI-based grammar, yet be fully compliant 
   with the RFC2396 specification. 

   This grammar provides the ability to construct the following data 
   structures in URL parameter values: 
	
      OBJECT
      ARRAY
      NUMBER
      BOOLEAN
      STRING
      NULL

   Example:

      The following shows a sample object defined in Javascript:

         var x = { 
            id: 1, 
            name: 'John Smith', 
            uri: 'http://sample/addressBook/person/1', 
            addressBookUri: 'http://sample/addressBook', 
            birthDate: '1946-08-12T00:00:00Z', 
            otherIds: null,
            addresses: [ 
               { 
                  uri: 'http://sample/addressBook/address/1', 
                  personUri: 'http://sample/addressBook/person/1', 
                  id: 1, 
                  street: '100 Main Street', 
                  city: 'Anywhereville', 
                  state: 'NY', 
                  zip: 12345, 
                  isCurrent: true,
               } 
            ] 
         } 

      Using the "strict" syntax defined in this document, the equivalent 
      UON notation would be as follows:

         x=$o(id=$n(1),name=John+Smith,uri=http://sample/
         addressBook/person/1,addressBookUri=http://sample/
         addressBook,birthDate=1946-08-12T00:00:00Z,otherIds=%00,
         addresses=$a($o(uri=http://sample/addressBook/
         address/1,personUri=http://sample/addressBook/
         person/1,id=$n(1),street=100+Main+Street,city=
         Anywhereville,state=NY,zip=$n(12345),isCurrent=$b(true)))) 

      A secondary "lax" syntax is available when the data type of the
      values are already known on the receiving end of the transmission:

         x=(id=1,name=John+Smith,uri=http://sample/
         addressBook/person/1,addressBookUri=http://sample/
         addressBook,birthDate=1946-08-12T00:00:00Z,otherIds=%00,
         addresses=((uri=http://sample/addressBook/
         address/1,personUri=http://sample/addressBook/
         person/1,id=1,street=100+Main+Street,city=
         Anywhereville,state=NY,zip=12345,isCurrent=true))) 

      Values represented in strict mode can be losslessly converted
      back and forth into a JSON model without any additional
      information.  Values represented in lax mode cannot.

1. Language constraints

   The grammar syntax is constrained to usage of characters allowed by 
      URI notation:

      uric       = reserved | unreserved | escaped
      reserved   = ";" | "/" | "?" | ":" | "@" | "&" | "=" | "+" |
                   "$" | ","
      unreserved = alphanum | mark
      mark       = "-" | "_" | "." | "!" | "~" | "*" | "'" | "(" | ")"

   In particular, the URI specification disallows the following 
   characters in unencoded form:

      unwise     = "{" | "}" | "|" | "\" | "^" | "[" | "]" | "`"
      delims     = "<" | ">" | "#" | "%" | <">

   The exclusion of {} and [] characters eliminates the possibility of 
   using JSON as parameter values.


2. Grammar constructs

   The grammar consists of the following language constructs:
   
      Objects - Values consisting of one or more child name/value pairs.
      Arrays - Values consisting of zero or more child values.
      Booleans - Values consisting of true/false values.
      Numbers - Decimal and floating point values.
      Strings - Everything else.

2.1. Objects 

   Objects are values consisting of one or more child name/value pairs.
   The $o() construct is used to define an object.

   Example:  A simple map with two key/value pairs:

      a1=$o(b1=x1,b2=x2)

   Example:  A nested map:
   
      a1=$o(b1=$o(c1=x1,c2=x2))

   When the data type is already known to be an object on the receiving 
   end, then the type flag can be removed from the construct to produce
   a simplified value. 

   Example:  A nested map using "lax" syntax:

     a1=(b1=(c1=x1,c2=x2))

2.2. Arrays

   Arrays are values consisting of zero or more child values.
   The $a() construct is used to define an array.

   Example:  An array of two string values:

      a1=$a(x1,x2)

   Example:  A 2-dimensional array:

      a1=$a($a(x1,x2),$a(x3,x4))

   Example:  An array of objects:

      a1=$a($o(b1=x1,b2=x2),$o(c1=x1,c2=x2))

   When the data type is already known to be an array on the receiving 
   end, then the type flag can be removed from the construct to produce
   a simplified value. 
   
   Example:  An array of objects using "lax" syntax:

      a1=((b1=x1,b2=x2),(c1=x1,c2=x2))

2.3. Booleans

   Booleans are values that can only take on values "true" or "false".  
   The $b() construct is used to define a boolean.
   
   Example:  Two boolean values:

      a1=$b(true)&a2=$b(false)
   
   When the data type is already known to be a boolean on the receiving 
   end, then the type flag and parentheses can be removed from the 
   construct to produce a simplified value. 

   Example:  Two boolean values using "lax" syntax:

      a1=true&a2=false

2.4. Numbers

   The $n() construct is used to define a number.
   Both decimal and float numbers are supported.
   
   Example:  Two numerical values, one decimal and one float:

      a1=$n(123)&a2=$n(1.23e1)

   When the data type is already known to be a number on the receiving 
   end, then the type flag and parentheses can be removed from the 
   construct to produce a simplified value. 
   
   Example:  Two numerical values using "lax" syntax:

      a1=123&a2=1.23e1

2.5. Strings

   Anything not conforming to one of the constructs described above 
   are treated as simple strings.  
   
   Example:  A simple string value:

      a1=foobar
   
   The tilde character (~) is used for escaping characters to prevent 
   them from being confused with syntax characters.  

   The following characters must be escaped in string literals:  

      $ , ( ) ~ =
   
   For example, the string literal "$o(b1=x)" should be 
   represented as follows:

      a1=~$o~(b1~=x~)
   
   In addition, strings can optionally be enclosed in parentheses
   when needed to handle ambiguous cases.
   
   The following two values are equivalent:
   
      a1=foobar
      a1=(foobar)
      
   Using parentheses, the following construct can be used to represent
   an empty string:
   
      a1=()
   
   The purpose for this is to handle a potential ambiguity in the 
   representation of an empty array ([]) vs. an array containing one
   empty string ([""]).  An array containing one empty string is 
   represented as follows:

      a1=$a(())

   Without this construct, there would not be a way to tell the 
   difference between an empty array and an array containing an empty    
   string:

      a1=$a()

   Note that an array consisting of two empty strings does not suffer 
   from this ambiguity, and the use of parenthesis is optional in 
   this case: 

      a1=$a(,)

2.7. Null values

   Nulls are represented by ASCII '0' as an escaped hex sequence:

      a1=%00

   Note that a string consisting of a single null character can be 
   represented with the following construct:

      a1=(%00)

2.8. Top-level attribute names

   Top-level attribute names (e.g. "a1" in "&a1=foobar") are treated
   as strings but for one exception.  The '=' character must be
   encoded so as not to be confused as a key/value separator.
   Note that the '=' character must also be escaped per the UON
   notation.
   
   For example, the UON equivalent of {"a=b":"a=b"} constructed as
   a top-level query parameter string would be as follows:
   
      a~%3Db=a~=b
      
   Note that the '=' character is encoded in the attribute name,
   but it is not necessary to have it encoded in the attribute value.

2.9. URL-encoded characters

   UON notation allows for any character, even UON grammar
   characters, to be URL-encoded.
   
   The following query strings are fully equivalent in structure:
   
     a1=$o(b1=x1,b2=x2)
     %61%31=%24%6F%28%62%31%3D%78%31%2C%62%32%3D%78%32%29


3. BNF

   The following BNF describes the syntax for top-level URI query 
   parameter values (e.g. ?<attrname>=<value>).

   attrname    = (string | null)
   value       = (var | string | null)

   string      = ("(" litchar* ")") | litchar*
   null        = "%00"
   
   var         = ovar | avar | nvar | bvar
   ovar        = ovar_strict | ovar_lax
   avar        = avar_strict | avar_lax
   nvar        = nvar_strict | nvar_lax
   bvar        = bvar_strict | bvar_lax
   ovar_strict = "$o(" [pairs] ")"
   ovar_lax    =   "(" [pairs] ")"
   avar_strict = "$a(" [values] ")"
   avar_lax    =   "(" [values] ")"
   nvar_strict = "$n(" number ")"
   nvar_lax    =       number
   bvar_strict = "$b(" boolean ")" 
   bvar_lax    =       boolean

   pairs       = pair ["," pairs]
   pair        = key "=" value	
   values      = value ["," values]
   key         = (string | null)
   boolean     = "true" | "false"

   escape_seq  = "~" escaped
   encode_seq  = "%" digithex digithex

   number      = [-] (decimal | float) [exp]
   decimal     = "0" | (digit19 digit*)
   float       = decimal "." digit+
   exp         = "e" [("+" | "-")] digit+

   litchar     = unencoded | encode_seq | escape_seq
   escaped     = "$" | "," | "(" | ")" | "~" | "=" 
   unencoded   = alpha | digit | 
                 ";" | "/" | "?" | ":" | "@" |
                 "-" | "_" | "." | "!" | "*" | "'" 
   alpha       = "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" |
                 "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" |
                 "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z" |
                 "A" | "B" | "C" | "D" | "E" | "F" | "G" | "H" | "I" |             
                 "J" | "K" | "L" | "M" | "N" | "O" | "P" | "Q" | "R" |
                 "S" | "T" | "U" | "V" | "W" | "X" | "Y" | "Z"
   digit       = "0" | digit19
   digit19     = "1" | "2" | "3" | "4" | "5" | "6" | "7" |
                 "8" | "9"
   digithex    = digit | 
                 "A" | "B" | "C" | "D" | "E" | "F" |
                 "a" | "b" | "c" | "d" | "e" | "f"




